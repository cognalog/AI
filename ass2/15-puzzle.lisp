(defun 15-puzzle (s0 sg limit st)
  (print 'BFS)
  (print (bfs s0 sg st))
  (print 'DFS)
  (print (dfs s0 sg limit st))
  (print 'IDDFS)
  (print (iddfs s0 sg limit 3 st))
  (print 'UCS)
  (print (ucs s0 sg st))
  (print 'GREEDY)
  (print 'mismatch| heuristic|)
  (print (greedy s0 sg #'mis-match st))
  (print 'manhattan| heuristic|)
  (print (greedy s0 sg #'manhat st))
  (print 'A*)
  (print 'mismatch| heuristic|)
  (print (a-star s0 sg #'mis-match st))
  (print 'manhattan| heuristic|)
  (print (a-star s0 sg #'manhat st))
  t)

(defun hardcore (s0 sg st)
  (print 'GREEDY)
  (print 'manhattan| heuristic|)
  (print (greedy s0 sg #'manhat st))
  (print 'A*)
  (print 'mismatch| heuristic|)
  (print (a-star s0 sg #'mis-match st))
  (print 'manhattan| heuristic|)
  (print (a-star s0 sg #'manhat st))
  t)

(defun main (limit st)
  (load "search-aux.lisp")
  (load "bfs.lisp")
  (load "dfs.lisp")
  (load "ucs.lisp")
  (load "greedy.lisp")
  (load "a-star.lisp")
  (format t "~%~%~a~%" 'EASY)
  (print (15-puzzle '((1 2 3 0) (4 5 6 7) (8 9 10 11) (12 13 14 15) (0 3))
		    '((0 1 2 3) (4 5 6 7) (8 9 10 11) (12 13 14 15) (0 0))
		    limit
		    st))
  (format t "~%~%~a~%" 'MODERATE)
  (print (15-puzzle '((1 2 6 3) (4 5 10 7) (0 9 14 11) (8 12 13 15) (2 0))
		    '((0 1 2 3) (4 5 6 7) (8 9 10 11) (12 13 14 15) (0 0))
		    limit
		    st))
  (format t "~%~%~a~%" 'HARD)
  (print (hardcore '((1 2 3 7) (4 5 6 15) (8 9 11 0) (12 13 14 10) (2 3))
		    '((0 1 2 3) (4 5 6 7) (8 9 10 11) (12 13 14 15) (0 0))		    
		    st)))